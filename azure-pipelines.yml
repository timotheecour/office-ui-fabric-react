pr:
  - master


trigger:
  - master

variables:
  - group: fabric-variables

pool: 'Self Host Ubuntu'

jobs:
  - job: Build
    steps:
      - template: azure-pipelines.tools.yml

      - template: azure-pipelines.cache.yml

      - script: |
          yarn
        displayName: yarn

      - script: |
          yarn checkchange
        displayName: check change

      - script: |
          yarn build
        displayName: build

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.Repository.LocalPath)
          # Include root folder so archive can just be extracted into $(Pipeline.Workspace)
          includeRootFolder: true
          archiveType: 'tar'
          tarCompression: 'gz'
          archiveFile: $(Build.ArtifactStagingDirectory)/build.tar.gz
          replaceExistingArchive: true

      - publish: $(Build.ArtifactStagingDirectory)
        artifact: Build-PR-$(Build.BuildNumber)

      - script: |
          az --version
          az extension add -n azure-devops
          echo $(buildQueuePat) | az devops login --organization https://uifabric.visualstudio.com
          az devops configure --defaults organization=https://uifabric.visualstudio.com project="fabricpublic" --use-git-aliases true
        env:
          AZURE_DEVOPS_EXT_PAT: $(buildQueuePat)
        displayName: Set up Azure CLI with DevOps

      - script: |
          az pipelines build queue --verbose --org https://uifabric.visualstudio.com -p fabricpublic --definition-name "office-ui-fabric-react - Perf-Test" --branch $(Build.SourceBranch) --variables artifact=Build-PR-$(Build.BuildNumber) buildId=$(Build.BuildId) buildReason=$(Build.Reason)
        env:
          AZURE_DEVOPS_EXT_PAT: $(buildQueuePat)
        displayName: Trigger Perf-Test and Screener jobs

      - task: DeleteFiles@1
        inputs:
          SourceFolder: $(Build.SourcesDirectory)
          Contents: '**/*'
        condition: always()

  - job: Validate
    dependsOn: Build
    pool: 'Self Host Ubuntu'
    steps:
      # No need for checkout since we're using build artifacts.
      - checkout: none

      - template: azure-pipelines.cache.yml

      - template: azure-pipelines.artifacts.yml
        parameters:
          artifact: Build-PR-$(Build.BuildNumber)
          buildId: $(Build.BuildId)

      - template: azure-pipelines.tools.yml

      - script: |
          yarn test
        displayName: test

      - script: |
          yarn lint
        displayName: lint

      - script: |
          yarn check-for-changed-files
        displayName: check for changed files

      - task: DeleteFiles@1
        inputs:
          SourceFolder: $(Build.SourcesDirectory)
          Contents: '**/*'
        condition: always()

  - job: ValidateFluent
    dependsOn: Build
    steps:
      # No need for checkout since we're using build artifacts.
      - checkout: none

      - template: azure-pipelines.cache.yml

      - template: azure-pipelines.artifacts.yml
        parameters:
          artifact: Build-PR-$(Build.BuildNumber)
          buildId: $(Build.BuildId)

      - template: azure-pipelines.tools.yml

      - script: |
          if [ $BUILD_REASON == "PullRequest" ]; then
            yarn danger ci
          else
            echo "Skipping Danger JS because BUILD_REASON ${BUILD_REASON} != PullRequest"
          fi
        displayName: danger
        env:
          DANGER_GITHUB_API_TOKEN: $(DANGER_GITHUB_API_TOKEN)

      - script: |
          yarn test:fluentui:e2e
        displayName: E2E Tests

      - script: |
          yarn test:fluentui:projects
        displayName: Project Tests

      - script: |
          yarn test:fluentui:circulars
        displayName: Circular Dependencies Tests

      - script: |
          yarn check-for-changed-files
        displayName: check for changed files

      - task: DeleteFiles@1
        inputs:
          SourceFolder: $(Build.SourcesDirectory)
          Contents: '**/*'
        condition: always()

  - job: Deploy
    dependsOn: Build
    steps:
      - template: azure-pipelines.cache.yml

      - template: azure-pipelines.artifacts.yml
        parameters:
          artifact: Build-PR-$(Build.BuildNumber)
          buildId: $(Build.BuildId)

      - template: azure-pipelines.tools.yml

      - script: |
          yarn bundle
        displayName: bundle

      - task: AzureUpload@1
        displayName: Upload PR deploy site
        inputs:
          SourcePath: 'apps/pr-deploy-site/dist'
          azureSubscription: 'UI Fabric (bac044cf-49e1-4843-8dda-1ce9662606c8)'
          storage: fabricweb
          ContainerName: '$web'
          BlobPrefix: 'pr-deploy-site/$(Build.SourceBranch)'

      - task: DeleteFiles@1
        inputs:
          SourceFolder: $(Build.SourcesDirectory)
          Contents: '**/*'
        condition: always()

  - job: ScreenerFluent
    steps:
      - script: |
          yarn
        displayName: yarn

      - template: azure-pipelines.cache.yml

      - template: azure-pipelines.tools.yml

      - script: |
          git config --global user.email "fabrictactical@microsoft.com"
          git config --global user.name "Fabric Tactical"
          yarn test:fluentui:visual
        displayName: run FUI VR Test
        env:
          SCREENER_API_KEY: $(screener.key)

      - task: DeleteFiles@1
        inputs:
          SourceFolder: $(Build.SourcesDirectory)
          Contents: '**/*'
        condition: always()

  - job: Screener
    dependsOn: Build
    # keeping this at microsoft hosted because this doesn't require builds
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
      # No need for checkout since we're using build artifacts.
      - checkout: none

      - template: azure-pipelines.cache.yml

      - template: azure-pipelines.artifacts.yml
        parameters:
          artifact: Build-PR-$(Build.BuildNumber)
          buildId: $(Build.BuildId)

      - template: azure-pipelines.tools.yml

      - script: |
          git config --global user.email "fabrictactical@microsoft.com"
          git config --global user.name "Fabric Tactical"
          yarn vrtest -- --debug
        displayName: run VR Test
        env:
          SCREENER_API_KEY: $(screener.key)

      - task: DeleteFiles@1
        inputs:
          SourceFolder: $(Build.SourcesDirectory)
          Contents: '**/*'
        condition: always()
